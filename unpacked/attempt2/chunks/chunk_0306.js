/* chunk:306 bytes:[7131841, 7150546) size:18705 source:unpacked-cli.js */
var vg2 = E((kg2) => {
    Object.defineProperty(kg2, "__esModule", {
        value: !0
    });
    kg2.ATTR_JVM_GC_NAME = kg2.ATTR_JVM_GC_ACTION = kg2.ATTR_HTTP_ROUTE = kg2.ATTR_HTTP_RESPONSE_STATUS_CODE = kg2.ATTR_HTTP_RESPONSE_HEADER = kg2.ATTR_HTTP_REQUEST_RESEND_COUNT = kg2.ATTR_HTTP_REQUEST_METHOD_ORIGINAL = kg2.HTTP_REQUEST_METHOD_VALUE_TRACE = kg2.HTTP_REQUEST_METHOD_VALUE_PUT = kg2.HTTP_REQUEST_METHOD_VALUE_POST = kg2.HTTP_REQUEST_METHOD_VALUE_PATCH = kg2.HTTP_REQUEST_METHOD_VALUE_OPTIONS = kg2.HTTP_REQUEST_METHOD_VALUE_HEAD = kg2.HTTP_REQUEST_METHOD_VALUE_GET = kg2.HTTP_REQUEST_METHOD_VALUE_DELETE = kg2.HTTP_REQUEST_METHOD_VALUE_CONNECT = kg2.HTTP_REQUEST_METHOD_VALUE_OTHER = kg2.ATTR_HTTP_REQUEST_METHOD = kg2.ATTR_HTTP_REQUEST_HEADER = kg2.ATTR_EXCEPTION_TYPE = kg2.ATTR_EXCEPTION_STACKTRACE = kg2.ATTR_EXCEPTION_MESSAGE = kg2.ATTR_EXCEPTION_ESCAPED = kg2.ERROR_TYPE_VALUE_OTHER = kg2.ATTR_ERROR_TYPE = kg2.DOTNET_GC_HEAP_GENERATION_VALUE_POH = kg2.DOTNET_GC_HEAP_GENERATION_VALUE_LOH = kg2.DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = kg2.DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = kg2.DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = kg2.ATTR_DOTNET_GC_HEAP_GENERATION = kg2.ATTR_CLIENT_PORT = kg2.ATTR_CLIENT_ADDRESS = kg2.ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = kg2.ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = kg2.ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = kg2.ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = kg2.ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = kg2.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = kg2.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = kg2.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = kg2.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = kg2.ATTR_ASPNETCORE_RATE_LIMITING_RESULT = kg2.ATTR_ASPNETCORE_RATE_LIMITING_POLICY = kg2.ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = kg2.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = kg2.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = kg2.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = kg2.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = kg2.ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = void 0;
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_GO = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_CPP = kg2.ATTR_TELEMETRY_SDK_LANGUAGE = kg2.SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = kg2.SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = kg2.SIGNALR_TRANSPORT_VALUE_LONG_POLLING = kg2.ATTR_SIGNALR_TRANSPORT = kg2.SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = kg2.SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = kg2.SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = kg2.ATTR_SIGNALR_CONNECTION_STATUS = kg2.ATTR_SERVICE_VERSION = kg2.ATTR_SERVICE_NAME = kg2.ATTR_SERVER_PORT = kg2.ATTR_SERVER_ADDRESS = kg2.ATTR_OTEL_STATUS_DESCRIPTION = kg2.OTEL_STATUS_CODE_VALUE_OK = kg2.OTEL_STATUS_CODE_VALUE_ERROR = kg2.ATTR_OTEL_STATUS_CODE = kg2.ATTR_OTEL_SCOPE_VERSION = kg2.ATTR_OTEL_SCOPE_NAME = kg2.NETWORK_TYPE_VALUE_IPV6 = kg2.NETWORK_TYPE_VALUE_IPV4 = kg2.ATTR_NETWORK_TYPE = kg2.NETWORK_TRANSPORT_VALUE_UNIX = kg2.NETWORK_TRANSPORT_VALUE_UDP = kg2.NETWORK_TRANSPORT_VALUE_TCP = kg2.NETWORK_TRANSPORT_VALUE_QUIC = kg2.NETWORK_TRANSPORT_VALUE_PIPE = kg2.ATTR_NETWORK_TRANSPORT = kg2.ATTR_NETWORK_PROTOCOL_VERSION = kg2.ATTR_NETWORK_PROTOCOL_NAME = kg2.ATTR_NETWORK_PEER_PORT = kg2.ATTR_NETWORK_PEER_ADDRESS = kg2.ATTR_NETWORK_LOCAL_PORT = kg2.ATTR_NETWORK_LOCAL_ADDRESS = kg2.JVM_THREAD_STATE_VALUE_WAITING = kg2.JVM_THREAD_STATE_VALUE_TIMED_WAITING = kg2.JVM_THREAD_STATE_VALUE_TERMINATED = kg2.JVM_THREAD_STATE_VALUE_RUNNABLE = kg2.JVM_THREAD_STATE_VALUE_NEW = kg2.JVM_THREAD_STATE_VALUE_BLOCKED = kg2.ATTR_JVM_THREAD_STATE = kg2.ATTR_JVM_THREAD_DAEMON = kg2.JVM_MEMORY_TYPE_VALUE_NON_HEAP = kg2.JVM_MEMORY_TYPE_VALUE_HEAP = kg2.ATTR_JVM_MEMORY_TYPE = kg2.ATTR_JVM_MEMORY_POOL_NAME = void 0;
    kg2.ATTR_USER_AGENT_ORIGINAL = kg2.ATTR_URL_SCHEME = kg2.ATTR_URL_QUERY = kg2.ATTR_URL_PATH = kg2.ATTR_URL_FULL = kg2.ATTR_URL_FRAGMENT = kg2.ATTR_TELEMETRY_SDK_VERSION = kg2.ATTR_TELEMETRY_SDK_NAME = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_RUST = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_PHP = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = kg2.TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = void 0;
    kg2.ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = "aspnetcore.diagnostics.exception.result";
    kg2.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = "aborted";
    kg2.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = "handled";
    kg2.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = "skipped";
    kg2.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = "unhandled";
    kg2.ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = "aspnetcore.diagnostics.handler.type";
    kg2.ATTR_ASPNETCORE_RATE_LIMITING_POLICY = "aspnetcore.rate_limiting.policy";
    kg2.ATTR_ASPNETCORE_RATE_LIMITING_RESULT = "aspnetcore.rate_limiting.result";
    kg2.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = "acquired";
    kg2.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = "endpoint_limiter";
    kg2.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = "global_limiter";
    kg2.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = "request_canceled";
    kg2.ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = "aspnetcore.request.is_unhandled";
    kg2.ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = "aspnetcore.routing.is_fallback";
    kg2.ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = "aspnetcore.routing.match_status";
    kg2.ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = "failure";
    kg2.ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = "success";
    kg2.ATTR_CLIENT_ADDRESS = "client.address";
    kg2.ATTR_CLIENT_PORT = "client.port";
    kg2.ATTR_DOTNET_GC_HEAP_GENERATION = "dotnet.gc.heap.generation";
    kg2.DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = "gen0";
    kg2.DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = "gen1";
    kg2.DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = "gen2";
    kg2.DOTNET_GC_HEAP_GENERATION_VALUE_LOH = "loh";
    kg2.DOTNET_GC_HEAP_GENERATION_VALUE_POH = "poh";
    kg2.ATTR_ERROR_TYPE = "error.type";
    kg2.ERROR_TYPE_VALUE_OTHER = "_OTHER";
    kg2.ATTR_EXCEPTION_ESCAPED = "exception.escaped";
    kg2.ATTR_EXCEPTION_MESSAGE = "exception.message";
    kg2.ATTR_EXCEPTION_STACKTRACE = "exception.stacktrace";
    kg2.ATTR_EXCEPTION_TYPE = "exception.type";
    var s86 = (A) => `http.request.header.${A}`;
    kg2.ATTR_HTTP_REQUEST_HEADER = s86;
    kg2.ATTR_HTTP_REQUEST_METHOD = "http.request.method";
    kg2.HTTP_REQUEST_METHOD_VALUE_OTHER = "_OTHER";
    kg2.HTTP_REQUEST_METHOD_VALUE_CONNECT = "CONNECT";
    kg2.HTTP_REQUEST_METHOD_VALUE_DELETE = "DELETE";
    kg2.HTTP_REQUEST_METHOD_VALUE_GET = "GET";
    kg2.HTTP_REQUEST_METHOD_VALUE_HEAD = "HEAD";
    kg2.HTTP_REQUEST_METHOD_VALUE_OPTIONS = "OPTIONS";
    kg2.HTTP_REQUEST_METHOD_VALUE_PATCH = "PATCH";
    kg2.HTTP_REQUEST_METHOD_VALUE_POST = "POST";
    kg2.HTTP_REQUEST_METHOD_VALUE_PUT = "PUT";
    kg2.HTTP_REQUEST_METHOD_VALUE_TRACE = "TRACE";
    kg2.ATTR_HTTP_REQUEST_METHOD_ORIGINAL = "http.request.method_original";
    kg2.ATTR_HTTP_REQUEST_RESEND_COUNT = "http.request.resend_count";
    var r86 = (A) => `http.response.header.${A}`;
    kg2.ATTR_HTTP_RESPONSE_HEADER = r86;
    kg2.ATTR_HTTP_RESPONSE_STATUS_CODE = "http.response.status_code";
    kg2.ATTR_HTTP_ROUTE = "http.route";
    kg2.ATTR_JVM_GC_ACTION = "jvm.gc.action";
    kg2.ATTR_JVM_GC_NAME = "jvm.gc.name";
    kg2.ATTR_JVM_MEMORY_POOL_NAME = "jvm.memory.pool.name";
    kg2.ATTR_JVM_MEMORY_TYPE = "jvm.memory.type";
    kg2.JVM_MEMORY_TYPE_VALUE_HEAP = "heap";
    kg2.JVM_MEMORY_TYPE_VALUE_NON_HEAP = "non_heap";
    kg2.ATTR_JVM_THREAD_DAEMON = "jvm.thread.daemon";
    kg2.ATTR_JVM_THREAD_STATE = "jvm.thread.state";
    kg2.JVM_THREAD_STATE_VALUE_BLOCKED = "blocked";
    kg2.JVM_THREAD_STATE_VALUE_NEW = "new";
    kg2.JVM_THREAD_STATE_VALUE_RUNNABLE = "runnable";
    kg2.JVM_THREAD_STATE_VALUE_TERMINATED = "terminated";
    kg2.JVM_THREAD_STATE_VALUE_TIMED_WAITING = "timed_waiting";
    kg2.JVM_THREAD_STATE_VALUE_WAITING = "waiting";
    kg2.ATTR_NETWORK_LOCAL_ADDRESS = "network.local.address";
    kg2.ATTR_NETWORK_LOCAL_PORT = "network.local.port";
    kg2.ATTR_NETWORK_PEER_ADDRESS = "network.peer.address";
    kg2.ATTR_NETWORK_PEER_PORT = "network.peer.port";
    kg2.ATTR_NETWORK_PROTOCOL_NAME = "network.protocol.name";
    kg2.ATTR_NETWORK_PROTOCOL_VERSION = "network.protocol.version";
    kg2.ATTR_NETWORK_TRANSPORT = "network.transport";
    kg2.NETWORK_TRANSPORT_VALUE_PIPE = "pipe";
    kg2.NETWORK_TRANSPORT_VALUE_QUIC = "quic";
    kg2.NETWORK_TRANSPORT_VALUE_TCP = "tcp";
    kg2.NETWORK_TRANSPORT_VALUE_UDP = "udp";
    kg2.NETWORK_TRANSPORT_VALUE_UNIX = "unix";
    kg2.ATTR_NETWORK_TYPE = "network.type";
    kg2.NETWORK_TYPE_VALUE_IPV4 = "ipv4";
    kg2.NETWORK_TYPE_VALUE_IPV6 = "ipv6";
    kg2.ATTR_OTEL_SCOPE_NAME = "otel.scope.name";
    kg2.ATTR_OTEL_SCOPE_VERSION = "otel.scope.version";
    kg2.ATTR_OTEL_STATUS_CODE = "otel.status_code";
    kg2.OTEL_STATUS_CODE_VALUE_ERROR = "ERROR";
    kg2.OTEL_STATUS_CODE_VALUE_OK = "OK";
    kg2.ATTR_OTEL_STATUS_DESCRIPTION = "otel.status_description";
    kg2.ATTR_SERVER_ADDRESS = "server.address";
    kg2.ATTR_SERVER_PORT = "server.port";
    kg2.ATTR_SERVICE_NAME = "service.name";
    kg2.ATTR_SERVICE_VERSION = "service.version";
    kg2.ATTR_SIGNALR_CONNECTION_STATUS = "signalr.connection.status";
    kg2.SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = "app_shutdown";
    kg2.SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = "normal_closure";
    kg2.SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = "timeout";
    kg2.ATTR_SIGNALR_TRANSPORT = "signalr.transport";
    kg2.SIGNALR_TRANSPORT_VALUE_LONG_POLLING = "long_polling";
    kg2.SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = "server_sent_events";
    kg2.SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = "web_sockets";
    kg2.ATTR_TELEMETRY_SDK_LANGUAGE = "telemetry.sdk.language";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_CPP = "cpp";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = "dotnet";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = "erlang";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_GO = "go";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = "java";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = "nodejs";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_PHP = "php";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = "python";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = "ruby";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_RUST = "rust";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = "swift";
    kg2.TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = "webjs";
    kg2.ATTR_TELEMETRY_SDK_NAME = "telemetry.sdk.name";
    kg2.ATTR_TELEMETRY_SDK_VERSION = "telemetry.sdk.version";
    kg2.ATTR_URL_FRAGMENT = "url.fragment";
    kg2.ATTR_URL_FULL = "url.full";
    kg2.ATTR_URL_PATH = "url.path";
    kg2.ATTR_URL_QUERY = "url.query";
    kg2.ATTR_URL_SCHEME = "url.scheme";
    kg2.ATTR_USER_AGENT_ORIGINAL = "user_agent.original"
});
var hg2 = E((bg2) => {
    Object.defineProperty(bg2, "__esModule", {
        value: !0
    });
    bg2.METRIC_SIGNALR_SERVER_CONNECTION_DURATION = bg2.METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS = bg2.METRIC_KESTREL_UPGRADED_CONNECTIONS = bg2.METRIC_KESTREL_TLS_HANDSHAKE_DURATION = bg2.METRIC_KESTREL_REJECTED_CONNECTIONS = bg2.METRIC_KESTREL_QUEUED_REQUESTS = bg2.METRIC_KESTREL_QUEUED_CONNECTIONS = bg2.METRIC_KESTREL_CONNECTION_DURATION = bg2.METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES = bg2.METRIC_KESTREL_ACTIVE_CONNECTIONS = bg2.METRIC_JVM_THREAD_COUNT = bg2.METRIC_JVM_MEMORY_USED_AFTER_LAST_GC = bg2.METRIC_JVM_MEMORY_USED = bg2.METRIC_JVM_MEMORY_LIMIT = bg2.METRIC_JVM_MEMORY_COMMITTED = bg2.METRIC_JVM_GC_DURATION = bg2.METRIC_JVM_CPU_TIME = bg2.METRIC_JVM_CPU_RECENT_UTILIZATION = bg2.METRIC_JVM_CPU_COUNT = bg2.METRIC_JVM_CLASS_UNLOADED = bg2.METRIC_JVM_CLASS_LOADED = bg2.METRIC_JVM_CLASS_COUNT = bg2.METRIC_HTTP_SERVER_REQUEST_DURATION = bg2.METRIC_HTTP_CLIENT_REQUEST_DURATION = bg2.METRIC_DOTNET_TIMER_COUNT = bg2.METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT = bg2.METRIC_DOTNET_THREAD_POOL_THREAD_COUNT = bg2.METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH = bg2.METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET = bg2.METRIC_DOTNET_PROCESS_CPU_TIME = bg2.METRIC_DOTNET_PROCESS_CPU_COUNT = bg2.METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS = bg2.METRIC_DOTNET_JIT_COMPILED_METHODS = bg2.METRIC_DOTNET_JIT_COMPILED_IL_SIZE = bg2.METRIC_DOTNET_JIT_COMPILATION_TIME = bg2.METRIC_DOTNET_GC_PAUSE_TIME = bg2.METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE = bg2.METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE = bg2.METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE = bg2.METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED = bg2.METRIC_DOTNET_GC_COLLECTIONS = bg2.METRIC_DOTNET_EXCEPTIONS = bg2.METRIC_DOTNET_ASSEMBLY_COUNT = bg2.METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS = bg2.METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS = bg2.METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION = bg2.METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE = bg2.METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS = bg2.METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES = bg2.METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS = void 0;
    bg2.METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS = "aspnetcore.diagnostics.exceptions";
    bg2.METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES = "aspnetcore.rate_limiting.active_request_leases";
    bg2.METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS = "aspnetcore.rate_limiting.queued_requests";
    bg2.METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE = "aspnetcore.rate_limiting.request.time_in_queue";
    bg2.METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION = "aspnetcore.rate_limiting.request_lease.duration";
    bg2.METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS = "aspnetcore.rate_limiting.requests";
    bg2.METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS = "aspnetcore.routing.match_attempts";
    bg2.METRIC_DOTNET_ASSEMBLY_COUNT = "dotnet.assembly.count";
    bg2.METRIC_DOTNET_EXCEPTIONS = "dotnet.exceptions";
    bg2.METRIC_DOTNET_GC_COLLECTIONS = "dotnet.gc.collections";
    bg2.METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED = "dotnet.gc.heap.total_allocated";
    bg2.METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE = "dotnet.gc.last_collection.heap.fragmentation.size";
    bg2.METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE = "dotnet.gc.last_collection.heap.size";
    bg2.METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE = "dotnet.gc.last_collection.memory.committed_size";
    bg2.METRIC_DOTNET_GC_PAUSE_TIME = "dotnet.gc.pause.time";
    bg2.METRIC_DOTNET_JIT_COMPILATION_TIME = "dotnet.jit.compilation.time";
    bg2.METRIC_DOTNET_JIT_COMPILED_IL_SIZE = "dotnet.jit.compiled_il.size";
    bg2.METRIC_DOTNET_JIT_COMPILED_METHODS = "dotnet.jit.compiled_methods";
    bg2.METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS = "dotnet.monitor.lock_contentions";
    bg2.METRIC_DOTNET_PROCESS_CPU_COUNT = "dotnet.process.cpu.count";
    bg2.METRIC_DOTNET_PROCESS_CPU_TIME = "dotnet.process.cpu.time";
    bg2.METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET = "dotnet.process.memory.working_set";
    bg2.METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH = "dotnet.thread_pool.queue.length";
    bg2.METRIC_DOTNET_THREAD_POOL_THREAD_COUNT = "dotnet.thread_pool.thread.count";
    bg2.METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT = "dotnet.thread_pool.work_item.count";
    bg2.METRIC_DOTNET_TIMER_COUNT = "dotnet.timer.count";
    bg2.METRIC_HTTP_CLIENT_REQUEST_DURATION = "http.client.request.duration";
    bg2.METRIC_HTTP_SERVER_REQUEST_DURATION = "http.server.request.duration";
    bg2.METRIC_JVM_CLASS_COUNT = "jvm.class.count";
    bg2.METRIC_JVM_CLASS_LOADED = "jvm.class.loaded";
    bg2.METRIC_JVM_CLASS_UNLOADED = "jvm.class.unloaded";
    bg2.METRIC_JVM_CPU_COUNT = "jvm.cpu.count";
    bg2.METRIC_JVM_CPU_RECENT_UTILIZATION = "jvm.cpu.recent_utilization";
    bg2.METRIC_JVM_CPU_TIME = "jvm.cpu.time";
    bg2.METRIC_JVM_GC_DURATION = "jvm.gc.duration";
    bg2.METRIC_JVM_MEMORY_COMMITTED = "jvm.memory.committed";
    bg2.METRIC_JVM_MEMORY_LIMIT = "jvm.memory.limit";
    bg2.METRIC_JVM_MEMORY_USED = "jvm.memory.used";
    bg2.METRIC_JVM_MEMORY_USED_AFTER_LAST_GC = "jvm.memory.used_after_last_gc";
    bg2.METRIC_JVM_THREAD_COUNT = "jvm.thread.count";
    bg2.METRIC_KESTREL_ACTIVE_CONNECTIONS = "kestrel.active_connections";
    bg2.METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES = "kestrel.active_tls_handshakes";
    bg2.METRIC_KESTREL_CONNECTION_DURATION = "kestrel.connection.duration";
    bg2.METRIC_KESTREL_QUEUED_CONNECTIONS = "kestrel.queued_connections";
    bg2.METRIC_KESTREL_QUEUED_REQUESTS = "kestrel.queued_requests";
    bg2.METRIC_KESTREL_REJECTED_CONNECTIONS = "kestrel.rejected_connections";
    bg2.METRIC_KESTREL_TLS_HANDSHAKE_DURATION = "kestrel.tls_handshake.duration";
    bg2.METRIC_KESTREL_UPGRADED_CONNECTIONS = "kestrel.upgraded_connections";
    bg2.METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS = "signalr.server.active_connections";
    bg2.METRIC_SIGNALR_SERVER_CONNECTION_DURATION = "signalr.server.connection.duration"
});
var qP = E((tL) => {
    var o76 = tL && tL.__createBinding || (Object.create ? function(A, B, Q, Z) {
            if (Z === void 0) Z = Q;
            var D = Object.getOwnPropertyDescriptor(B, Q);
            if (!D || ("get" in D ? !B.__esModule : D.writable || D.configurable)) D = {
                enumerable: !0,
                get: function() {
                    return B[Q]
                }
            };
            Object.defineProperty(A, Z, D)
        } : function(A, B, Q, Z) {
            if (Z === void 0) Z = Q;
            A[Z] = B[Q]
        }),
        LT1 = tL && tL.__exportStar || function(A, B) {
            for (var Q in A)
                if (Q !== "default" && !Object.prototype.hasOwnProperty.call(B, Q)) o76(B, A, Q)
        };
    Object.defineProperty(tL, "__esModule", {
        value: !0
    });
    LT1(Af2(), tL);
    LT1(jg2(), tL);
    LT1(vg2(), tL);
    LT1(hg2(), tL)
});
var mg2 = E((gg2) => {
    Object.defineProperty(gg2, "__esModule", {
        value: !0
    });
    gg2.SDK_INFO = void 0;
    var t76 = Ay2(),
        T31 = qP();
    gg2.SDK_INFO = {
        [T31.SEMRESATTRS_TELEMETRY_SDK_NAME]: "opentelemetry",
        [T31.SEMRESATTRS_PROCESS_RUNTIME_NAME]: "node",
        [T31.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]: T31.TELEMETRYSDKLANGUAGEVALUES_NODEJS,
        [T31.SEMRESATTRS_TELEMETRY_SDK_VERSION]: t76.VERSION
    }
});
var lg2 = E((dg2) => {
    Object.defineProperty(dg2, "__esModule", {
        value: !0
    });
    dg2.unrefTimer = void 0;

    function e76(A) {
        A.unref()
    }
    dg2.unrefTimer = e76
});