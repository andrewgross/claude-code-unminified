DIFF: chunk_0001 - Original vs Humanified
Generated: 2025-08-18T20:24:11.600Z
Project: A chunk of claude code cli js
============================================================

Line 2:
- import {
+ import { createRequire as tlB } from 'node:module';

Line 3:
-     createRequire as tlB
+ var objectVar = Object.create;

Line 4:
- } from "node:module";
+ var {

Line 5:
- var alB = Object.create;
+   getPrototypeOf: slB,

Line 6:
- var {
+   defineProperty: Dm1,

Line 7:
-     getPrototypeOf: slB,
+   getOwnPropertyNames: rlB,

Line 8:
-     defineProperty: Dm1,
+ } = Object;

Line 9:
-     getOwnPropertyNames: rlB
+ var objectVar = Object.prototype.hasOwnProperty;

Line 10:
- } = Object;
+ var cliHandler = (A, B, Q) => {

Line 11:
- var olB = Object.prototype.hasOwnProperty;
+   Q = A != null ? objectVar(slB(A)) : {};

Line 12:
- var G1 = (A, B, Q) => {
+   let Z =

Line 13:
-     Q = A != null ? alB(slB(A)) : {};
+     B || !A || !A.__esModule

Line 14:
-     let Z = B || !A || !A.__esModule ? Dm1(Q, "default", {
+       ? Dm1(Q, 'default', {

Line 15:
-         value: A,
+           value: A,

Line 16:
-         enumerable: !0
+           enumerable: !0,

Line 17:
-     }) : Q;
+         })

Line 18:
-     for (let D of rlB(A))
+       : Q;

Line 19:
-         if (!olB.call(Z, D)) Dm1(Z, D, {
+   for (let D of rlB(A))

Line 20:
-             get: () => A[D],
+     if (!objectVar.call(Z, D))

Line 21:
-             enumerable: !0
+       Dm1(Z, D, {

Line 22:
-         });
+         get: () => A[D],

Line 23:
-     return Z
+         enumerable: !0,

Line 24:
- };
+       });

Line 25:
- var E = (A, B) => () => (B || A((B = {
+   return Z;

Line 26:
-     exports: {}
+ };

Line 27:
- }).exports, B), B.exports);
+ var E = (A, B) => () => (

Line 28:
- var bj = (A, B) => {
+   B ||

Line 29:
-     for (var Q in B) Dm1(A, Q, {
+     A(

Line 30:
-         get: B[Q],
+       (B = {

Line 31:
-         enumerable: !0,
+         exports: {},

Line 32:
-         configurable: !0,
+       }).exports,

Line 33:
-         set: (Z) => B[Q] = () => Z
+       B

Line 34:
-     })
+     ),

Line 35:
- };
+   B.exports

Line 36:
- var K21 = (A, B) => () => (A && (B = A(A = 0)), B);
+ );

Line 37:
- var W1 = tlB(import.meta.url);
+ var cliHandler = (A, B) => {

Line 38:
- var Gy0 = E((sg8, Dy0) => {
+   for (var Q in B)

Line 39:
-     Dy0.exports = Zy0;
+     Dm1(A, Q, {

Line 40:
-     Zy0.sync = xtB;
+       get: B[Q],

Line 41:
-     var By0 = W1("fs");
+       enumerable: !0,

Line 42:
- 
+       configurable: !0,

Line 43:
-     function _tB(A, B) {
+       set: (Z) => (B[Q] = () => Z),

Line 44:
-         var Q = B.pathExt !== void 0 ? B.pathExt : process.env.PATHEXT;
+     });

Line 45:
-         if (!Q) return !0;
+ };

Line 46:
-         if (Q = Q.split(";"), Q.indexOf("") !== -1) return !0;
+ var dataVar = (A, B) => () => (A && (B = A((A = 0))), B);

Line 47:
-         for (var Z = 0; Z < Q.length; Z++) {
+ var dataVar = tlB(import.meta.url);

Line 48:
-             var D = Q[Z].toLowerCase();
+ var fsOperation = E((fsOperation, fsOperation) => {

Line 49:
-             if (D && A.substr(-D.length).toLowerCase() === D) return !0
+   fsOperation.exports = fsOperation;

Line 50:
-         }
+   fsOperation.sync = fsOperation;

